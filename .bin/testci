#!/usr/bin/env python3

import subprocess
import os
import sys
import secrets
import argparse
from pathlib import Path


def test_label_due_to_type(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["type"] = "diagnostic"
    pr_spec["description"] = "label is applied due to type"
    pr_spec["body"] = "\n".join(
        [
            "Expected outcome:",
            "1. `diagnostic` label applied due to type",
            "2. gpanders assigned as reviewer",
        ]
    )

    create_pr(pr_spec)
    subprocess.call(["git", "switch", "--quiet", "master"])


def test_label_due_to_scope(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["scope"] = "diagnostic"
    pr_spec["description"] = "label is applied due to scope"
    pr_spec["body"] = "\n".join(
        [
            "Expected outcome:",
            "1. `diagnostic` label applied due to scope",
            "2. gpanders assigned as reviewer",
        ]
    )

    create_pr(pr_spec)
    subprocess.call(["git", "switch", "--quiet", "master"])


def test_add_reviewer_from_label(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["description"] = "reviewer is added due to manually adding label"
    pr_spec["body"] = "\n".join(
        [
            "Expected outcome:",
            "1. `diagnostic` label manually applied",
            "2. gpanders assigned as reviewer",
        ]
    )

    create_pr(pr_spec)
    gh_add_label("diagnostic")
    subprocess.call(["git", "switch", "--quiet", "master"])


def test_dont_add_reviewer_on_draft(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["description"] = "reviewer not added on draft PRs if label is added"
    pr_spec["draft"] = True
    pr_spec["body"] = "\n".join(
        [
            "Expected outcome:",
            "1. `diagnostic` label applied on draft PR",
            "2. No reviewers assigned",
        ]
    )

    create_pr(pr_spec)
    gh_add_label("diagnostic")
    subprocess.call(["git", "switch", "--quiet", "master"])


def gh_add_label(label):
    login("dundargoc")
    subprocess.call(["gh", "pr", "edit", "--add-label", label])


def test_dont_add_reviewer_on_closed(pr_spec_default):
    # Doesn't work at the moment. `gh pr close` doesn't automatically detect
    # current branch PR.
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["description"] = "reviewer not added on closed PRs if label is added"
    pr_spec["draft"] = True
    pr_spec["body"] = "\n".join(
        [
            "Expected outcome:",
            "1. `diagnostic` label applied on closed PR",
            "2. No reviewers assigned",
        ]
    )

    create_pr(pr_spec)
    subprocess.call(["gh", "pr", "close"])
    subprocess.call(["gh", "pr", "edit", "--add-label", "diagnostic"])
    subprocess.call(["git", "switch", "--quiet", "master"])


def test_run_ci_from_pull_request(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["body"] = "\n".join(["Expected outcome:", "1. CI tests pass"])

    create_pr(pr_spec)
    subprocess.call(["git", "switch", "--quiet", "master"])


def create_pr(pr_spec):
    login("notdundargoc")

    repo_path = subprocess.check_output(
        ["git", "rev-parse", "--show-toplevel"], text=True
    ).strip()

    branch = f"ci-test/{secrets.token_hex(5)}"

    subprocess.call(["git", "checkout", "--quiet", "-b", branch])

    filename = Path(repo_path) / ".test"
    filename.write_text("")

    subprocess.call(["git", "add", "-A"])

    if pr_spec["scope"]:
        pr_spec["scope"] = f'({pr_spec["scope"]})'

    commit_message = f'{pr_spec["type"]}{pr_spec["scope"]}: {pr_spec["description"]}'
    subprocess.call(["git", "commit", "--quiet", "-m", commit_message])
    subprocess.call(
        ["git", "push", "--quiet", "--set-upstream", "origin", branch],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

    gh_command = [
        "gh",
        "pr",
        "create",
        "--title",
        commit_message,
        "--body",
        pr_spec["body"],
        "-R",
        "neodundar/neovim",
    ]
    if pr_spec["draft"]:
        gh_command.append("--draft")
    subprocess.call(gh_command)


def disable_all_workflows():
    login("dundargoc")
    active_workflows = subprocess.check_output(
        ["gh", "workflow", "list"], text=True
    ).splitlines()
    for workflow in active_workflows:
        workflow_name = workflow.split("\t")[0]
        subprocess.call(["gh", "workflow", "disable", workflow_name])


def enable_workflows(workflows):
    login("dundargoc")
    for workflow in workflows:
        subprocess.call(["gh", "workflow", "enable", workflow])


def login(user):
    hosts_path = Path(os.environ["XDG_CONFIG_HOME"]) / "gh" / "hosts.yml"
    hosts_path.unlink(missing_ok=True)

    token_path = (
        Path(os.environ["HOME"]) / ".private-dotfiles" / "token" / f"{user}-gh-cli"
    )

    with open(token_path) as f:
        subprocess.run(["gh", "auth", "login", "--with-token"], text=True, stdin=f)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("testnames", nargs="*", choices=[[], "all", "label", "ci"])
    args = parser.parse_args()
    if not args.testnames:
        args.testnames = ["all"]

    repo_path = subprocess.check_output(
        ["git", "rev-parse", "--show-toplevel"], text=True
    ).strip()
    HOME = os.environ["HOME"]

    if repo_path not in [f"{HOME}/programs/dundar-organization/neovim"]:
        sys.exit("Attempting VERY dangerous command outsite of intended area. Abort")

    subprocess.call(["testclean"])

    pr_spec_default = {
        "type": "test",
        "scope": "",
        "description": "test CI",
        "body": "",
        "draft": False,
    }

    # Test labeling and review
    if set(args.testnames) & {"all", "label"}:
        disable_all_workflows()
        enable_workflows(["Pull Request Labeler", "Request reviews"])

        test_label_due_to_type(pr_spec_default)
        test_label_due_to_scope(pr_spec_default)
        test_add_reviewer_from_label(pr_spec_default)
        test_dont_add_reviewer_on_draft(pr_spec_default)

    # Test CI tests
    if set(args.testnames) & {"all", "ci"}:
        disable_all_workflows()
        enable_workflows(["CI"])

        test_run_ci_from_pull_request(pr_spec_default)

    login("dundargoc")


if __name__ == "__main__":
    main()
