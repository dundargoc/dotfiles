#!/usr/bin/env python3

import subprocess
import os
import sys
import secrets
from pathlib import Path


def test_create_pr_and_label_due_to_type(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["type"] = "diagnostic"
    pr_spec["description"] = "label is applied due to type"
    pr_spec["body"] = "\n".join(
        [
            "Expected outcome:",
            "1. `diagnostic` label applied due to type",
            "2. gpanders assigned as reviewer",
        ]
    )

    create_pr(pr_spec)
    subprocess.call(["git", "switch", "--quiet", "master"])


def test_create_pr_and_label_due_to_scope(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["scope"] = "diagnostic"
    pr_spec["description"] = "label is applied due to scope"
    pr_spec["body"] = "\n".join(
        [
            "Expected outcome:",
            "1. `diagnostic` label applied due to scope",
            "2. gpanders assigned as reviewer",
        ]
    )

    create_pr(pr_spec)
    subprocess.call(["git", "switch", "--quiet", "master"])


def test_create_pr_and_assign_reviewer_due_to_adding_label(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["description"] = "reviewer is added due to manually adding label"
    pr_spec["body"] = "\n".join(
        [
            "Expected outcome:",
            "1. `diagnostic` label manually applied",
            "2. gpanders assigned as reviewer",
        ]
    )

    create_pr(pr_spec)
    subprocess.call(["gh", "pr", "edit", "--add-label", "diagnostic"])
    subprocess.call(["git", "switch", "--quiet", "master"])


def test_create_pr(pr_spec_default):
    pr_spec = {}
    pr_spec.update(pr_spec_default)
    pr_spec["body"] = "\n".join(["Expected outcome:", "1. CI tests pass"])

    create_pr(pr_spec)
    subprocess.call(["git", "switch", "--quiet", "master"])


def create_pr(pr_spec):
    repo_path = subprocess.check_output(
        ["git", "rev-parse", "--show-toplevel"], text=True
    ).strip()

    branch = f"ci-test/{secrets.token_hex(5)}"

    subprocess.call(["git", "checkout", "--quiet", "-b", branch])

    filename = Path(repo_path) / ".test"
    filename.write_text("")

    subprocess.call(["git", "add", "-A"])

    if pr_spec["scope"]:
        pr_spec["scope"] = f'({pr_spec["scope"]})'

    commit_message = f'{pr_spec["type"]}{pr_spec["scope"]}: {pr_spec["description"]}'
    subprocess.call(["git", "commit", "--quiet", "-m", commit_message])
    subprocess.call(
        ["git", "push", "--quiet", "--set-upstream", "origin", branch],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    subprocess.call(
        [
            "gh",
            "pr",
            "create",
            "--title",
            commit_message,
            "--body",
            pr_spec["body"],
            "-R",
            "neodundar/neovim",
        ]
    )


def disable_all_workflows():
    active_workflows = subprocess.check_output(
        ["gh", "workflow", "list"], text=True
    ).splitlines()
    for workflow in active_workflows:
        workflow_name = workflow.split("\t")[0]
        subprocess.call(["gh", "workflow", "disable", workflow_name])


def enable_workflows(workflows):
    for workflow in workflows:
        subprocess.call(["gh", "workflow", "enable", workflow])


def main():
    repo_path = subprocess.check_output(
        ["git", "rev-parse", "--show-toplevel"], text=True
    ).strip()
    HOME = os.environ["HOME"]

    if repo_path not in [f"{HOME}/programs/dundar-organization/neovim"]:
        sys.exit("Attempting VERY dangerous command outsite of intended area. Abort")

    subprocess.call(["testclean"])

    pr_spec_default = {
        "type": "chore",
        "scope": "",
        "description": "test CI",
        "body": "",
    }

    # Test labeling and review
    disable_all_workflows()
    enable_workflows(["Pull Request Labeler", "Request reviews"])
    test_create_pr_and_label_due_to_type(pr_spec_default)
    test_create_pr_and_label_due_to_scope(pr_spec_default)
    test_create_pr_and_assign_reviewer_due_to_adding_label(pr_spec_default)

    # Test CI tests
    disable_all_workflows()
    enable_workflows(["CI"])
    test_create_pr(pr_spec_default)


if __name__ == "__main__":
    main()
