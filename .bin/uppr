#!/usr/bin/env python

"""
Automatically update PR text on github to be the same as the commit messages.
"""

import subprocess
import tempfile
from pathlib import Path


def call(command):
    """
    Helper function for call for simple cases.
    """
    return subprocess.call(command.split())


def call_shell(command):
    """
    Helper function for call for simple cases. Use shell = true
    """
    return subprocess.call(command, shell=True)


def co(command):
    """
    Helper function for check_output for simple cases.
    """
    return subprocess.check_output(command.split(), text=True).strip()


def get_default_branch():
    """
     Get default branch from github. May need to use
    `git remote set-head origin -a` once on the repo beforehand if this doesn't
    work.
    """

    return co("git rev-parse --abbrev-ref origin/HEAD").split("/")[1]


def main():
    default_branch = get_default_branch()
    current_branch = co("git branch --show-current")

    if default_branch == current_branch:
        exit(f"Current branch is same as default branch: {default_branch}. Abort")

    ancestor_commit = co(f"git merge-base {current_branch} {default_branch}")
    all_commits = co(f"git rev-list {ancestor_commit}...{current_branch}").splitlines()

    if len(all_commits) == 1:
        commit = all_commits[0]
        message_body = co(f"git log --format=%b -n 1 {commit}")
        message_subject = co(f"git log --format=%s -n 1 {commit}")
        call_shell(f'gh pr edit --title "{message_subject}"')
        call_shell(f'gh pr edit --body "{message_body}"')
    else:
        all_messages = []
        for commit in all_commits:
            commit_message = "- " + co(f"git log --format=%B -n 1 {commit}")
            all_messages.append(commit_message)
        pr_text = "\n\n".join(reversed(all_messages))
        call_shell(f'gh pr edit --body "{pr_text}"')


if __name__ == "__main__":
    main()
