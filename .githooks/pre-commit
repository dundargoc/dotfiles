#!/usr/bin/env python3
"""
This is a pre-commit hook that I like to use. It currently formats all modified
shell and python scripts, but I'm sure I'll add formatting for other file types in the
future.
"""

import os
import shutil
import subprocess
import sys


def format_lua_files(lua_files):
	"""
	Format modified lua files with stylua (if possible).
	"""
	if lua_files:
		if shutil.which("stylua") is not None:
			subprocess.call(["stylua"] + lua_files)


def format_shell_scripts(shell_scripts):
	"""
	Format modified shell scripts with shfmt (if possible).
	"""
	if shell_scripts:
		if shutil.which("shfmt") is not None:
			subprocess.call(["shfmt", "-w", "-s"] + shell_scripts)


def format_python_scripts(python_scripts):
	"""
	Format modified python scripts with isort and black if possible.
	"""
	if python_scripts:
		if shutil.which("isort") is not None:
			subprocess.call(["isort"] + python_scripts)

		if shutil.which("black") is not None:
			format_python_scripts_with_black(python_scripts)


def format_python_scripts_with_black(python_scripts):
	"""
	Format modified python scripts with black and convert spaces to tabs.
	"""
	subprocess.call(["black"] + python_scripts)

	for script in python_scripts:
		unexpanded_script = subprocess.check_output(
			["unexpand", "--first-only", "-t4", script], universal_newlines=True
		)

		with open(script, "w") as file:
			file.write(unexpanded_script)


def main():
	shell_scripts = []
	python_scripts = []
	lua_files = []

	root_directory = subprocess.check_output(
		["git", "rev-parse", "--show-toplevel"], universal_newlines=True
	).strip()

	git_status_output = subprocess.check_output(
		["git", "status", "--porcelain"], universal_newlines=True
	).strip()

	if not git_status_output:
		sys.exit()

	changed_files_relative = [
		i.split()[1] for i in git_status_output.split("\n") if i.split()[0] != "D"
	]

	changed_files = [os.path.join(root_directory, i) for i in changed_files_relative]

	for changed_file in changed_files:
		filetype = subprocess.check_output(
			["file", "-b", changed_file], universal_newlines=True
		).lower()

		# Filetypes that tend to have shebangs. That means the command "file"
		# should usually work.
		if "shell" in filetype:
			shell_scripts.append(changed_file)
		elif "python" in filetype:
			python_scripts.append(changed_file)

		if changed_file.endswith(".lua"):
			lua_files.append(changed_file)

	format_shell_scripts(shell_scripts)
	format_python_scripts(python_scripts)
	format_lua_files(lua_files)

	subprocess.call(["git", "add", "-A"])


if __name__ == "__main__":
	main()
